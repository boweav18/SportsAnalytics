#   - Change the labels on the y-axis to be the character "$1,000", "$2,000", etc.
#   - Change the breaks on the x-axis
#   - Use theme_minimal()
airbb %>%
filter(property_type %in% c("Apartment", "Condominium", "House", "Townhouse")) %>%
ggplot(aes(x=accommodates, y=price)) +
geom_point(alpha = 0.5, aes(color = room_type)) +
theme_minimal() +
theme(legend.position = "bottom",
panel.grid.major.x = element_line(color="grey99"),
panel.grid.minor.x = element_blank(),
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid.minor = element_line(linetype = 3, color="grey96"),
panel.grid.major = element_line(color="grey95"),
axis.title = element_text(face="bold"),
plot.subtitle = element_text(size = 10, face="italic"),
plot.caption = element_text(size = 8)) +
scale_color_manual(name = "Room Type",values=c("royalblue", "grey60", "mediumpurple")) +
scale_y_continuous(breaks = seq(0,6000,by=1000),
labels = c("0",'$1,000','$2,000','$3,000','$4,000','$5,000','$6,000'))+
scale_x_continuous(breaks = seq(1,16,by=1))+
labs(title="Price vs. Maximum Accomodations",
subtitle = "Restricted to Apartments, Houses, Townhouses, and Condos.",
caption = "Source: Inside Airbnb",
x="Accommodates", y="Price")
################################################################################
# 3. Distributions (8pts)
#  Compare the distribution of prices for each property type using boxplots.
# There should be a different box for each value of property type, and the points
# should be on the plot as well. See Q3_boxplot.png for the screenshot.
#   - Filter the Property type by "Apartment", "Condominium", "House", "Townhouse"
#   - Filter the price <= 1000
#   - Use the colors "lightsteelblue" and "steelblue" for the boxplot colors and the points respectively
#   - Make the boxplot transparency 0.5, no outliers
#   - Make the point transparency 0.05
#   - Use size 8 font for the caption and size 10 for the subtitle
airbb %>%
filter(property_type %in% c("Apartment", "House", "Townhouse","Condominium") &
price <= 1000) %>%
mutate(property_type = factor(property_type,levels = c('Apartment','House','Townhouse','Condominium')))%>%
ggplot(aes(property_type,price)) +
geom_jitter(color = 'lightsteelblue',alpha = 0.05) +
geom_boxplot(outlier.shape = NA,fill = "steelblue",alpha = 0.5)+
theme_minimal() +
theme(legend.position = "bottom",
panel.grid.major.x = element_line(color="grey99"),
panel.grid.minor.x = element_blank(),
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid.minor = element_line(linetype = 3, color="grey96"),
panel.grid.major = element_line(color="grey95"),
plot.subtitle = element_text(size = 10, face="italic"),
plot.caption = element_text(size = 8)) +
labs(title="Distribution of Price by Property Type",
subtitle = "Restricted to Apartments, Houses, Townhouses, and Condos, price <= $1,000.",
caption = "Source: Inside Airbnb",
x="", y="Price") +
coord_flip()
################################################################################
# 4. Heatmap (8pts)
#  Compare the number of listings of each property type and room type
# using a heatmap. See Q4_heatmap.png for the screenshot.
#   - Use the colors "white" and "royalblue" as the low and high values
#   - Use size 8 font for the caption and size 10 for the subtitle
#   - Place the legend on the right-hand side
#   - Reorder the y-axis by the total number of listings
#   - Remove NAs
airbb %>%
group_by(property_type,room_type) %>%
summarise(total_list=n()) %>%
complete(property_type,room_type, fill = list(n=0)) %>%
ggplot(aes(x = room_type, y=reorder(property_type,total_list))) +
geom_tile(aes(fill = total_list)) +
theme_minimal() +
scale_fill_continuous("Listings",
low="white", high="royalblue") +
labs(x = "", y="", title="Number of Airbnb Listings by Type",
color = 'Year',caption = 'Source: Inside Airbnb') +
theme(axis.ticks = element_blank(),
plot.title = element_text(size=18, hjust=0.5),
panel.border = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.title = element_text(face="bold"),
plot.subtitle = element_text(size = 10, face="italic"),
plot.caption = element_text(size = 8,face = 'italic'))
################################################################################
# 5. Insight (8pts)
# The following question asks you to come up with one insight on specific
# elements of the Airbnb data. This chart will be graded according to the following dimensions:
# - Is the chart technically correct? - 4 pts
#   - Does it contain data errors?
#   - Does it contain the appropriate elements?
# - Is your conclusion sound? - 2pt
# -	Is the graph attractive? - 1pt
# - How sophisticated is your graph? - 1pt
################################################################################
# Prompt:
# I am considering listing a 1-bed, 1-bath property on Airbnb, and I
# want to know what elements of the listing are associated with high
# reviews. Tell me something useful about the relationship between
# review score and price, cleaning_fee, guests, extra people,
# max accommodations, room type, bed type and/or neighborhood.
airbb %>%
filter(bedrooms == 1 & bathrooms == 1) %>%
group_by(bed_type,room_type) %>%
summarise(avg_rating=mean(review_scores_rating,na.rm = T)) %>%
complete(bed_type,room_type, fill = list(n=0)) %>%
ggplot(aes(x = bed_type, y=room_type)) +
geom_tile(aes(fill = avg_rating)) +
theme_minimal() +
scale_fill_continuous("Average Rating",
low="white", high="royalblue") +
labs(x = "", y="", title="Average Rating of Airbnb by Room and Bed Type",
subtitle= "Couches in an entire home/apt have highest average rating for 1 Bed, 1 Bath Airbnb's",
caption = 'Source: Inside Airbnb') +
theme(axis.ticks = element_blank(),
plot.title = element_text(size=18, hjust=0),
panel.border = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.title = element_text(face="bold"),
plot.subtitle = element_text(size = 10, face="italic"),
plot.caption = element_text(size = 8,face = 'italic'))
################################################################################
#EXAM END
################################################################################
library(shiny); runApp('C:/Users/andrb/Documents/app_2.R')
runApp('C:/Users/andrb/Documents/app_2.R')
runApp('C:/Users/andrb/Documents/app_2.R')
?write.csv
runApp('C:/Users/andrb/Documents/app_2.R')
iris
runApp('C:/Users/andrb/Documents/app_2.R')
runApp('C:/Users/andrb/Documents/app_2.R')
runApp('C:/Users/andrb/Documents/app_2.R')
runApp('C:/Users/andrb/Documents/app_2.R')
runApp('C:/Users/andrb/Documents/app_2.R')
runApp('C:/Users/andrb/Documents/app_2.R')
?write_excel_csv
runApp('C:/Users/andrb/Documents/app_2.R')
?downloadHandler
runApp('C:/Users/andrb/Documents/app_2.R')
runApp('C:/Users/andrb/Documents/app_2.R')
runApp('SportsAnalytics')
runApp('SportsAnalytics')
runApp('SportsAnalytics')
runApp('SportsAnalytics')
runApp('SportsAnalytics')
runApp('SportsAnalytics')
runApp('SportsAnalytics')
install.packages('DT')
runApp('SportsAnalytics')
shiny::runApp('SportsAnalytics')
runApp('SportsAnalytics')
shiny::runApp('SportsAnalytics')
shiny::runApp('SportsAnalytics')
install.packages("spotifyr")
library(spotifyr)
library(shiny)
library(tidyverse)
library(purrr)
library(readxl)
runApp('SportsAnalytics')
library(sqldf)
library(tidyverse)
Delta_2013 <- read_csv("C:/Users/andrb/Documents/Data_management/Delta_2013.csv")
View(Delta_2013)
Delta <- read_csv("C:/Users/andrb/Documents/Data_management/Delta_2013.csv")
Delta <- read_csv("C:/Users/andrb/Documents/Data_management/Delta_2013.csv")
Delta$DayofMonth
trowSQL <- sqldf("select * from Delta;")
View(trowSQL)
Delta$Month
trowSQL <- sqldf("select * from Delta where Month = 2;")
Delta$DepDel15
Delta$DepDelay
trowSQL <- sqldf("select DayOfMonth,AVG(DepDelay) from Delta group by DayOfMonth;")
View(trowSQL)
trowSQL <- sqldf("select DayOfMonth,AVG(DepDelay) as Avg_Dep_Delay,AVG(ArrDelay) as Avg_Arr_Delay from Delta group by DayOfMonth;")
View(trowSQL)
query <- sqldf("select DayOfMonth,AVG(DepDelay) as Avg_Dep_Delay,AVG(ArrDelay) as Avg_Arr_Delay from Delta group by DayOfMonth;")
query %>% ggplot(aes(x=DayofMonth,y=Avg_Dep_Delay)) +
geom_line()
query %>% ggplot(aes(x=DayofMonth)) +
geom_line(aes(y=Avg_Dep_Delay))
query %>% ggplot(aes(x=DayofMonth)) +
geom_line(aes(y=Avg_Dep_Delay)) +
geom_line(aes(y=Avg_Arr_Delay))
query %>% ggplot(aes(x=DayofMonth)) +
geom_line(aes(y=Avg_Dep_Delay,color = 'blue')) +
geom_line(aes(y=Avg_Arr_Delay,color = 'red'))
query %>% ggplot(aes(x=DayofMonth)) +
geom_line(aes(y=Avg_Dep_Delay,color = 'Departure Delay')) +
geom_line(aes(y=Avg_Arr_Delay,color = 'Arrival Delay'))
?labs
query %>% ggplot(aes(x=DayofMonth)) +
geom_line(aes(y=Avg_Dep_Delay,color = 'Departure Delay')) +
geom_line(aes(y=Avg_Arr_Delay,color = 'Arrival Delay')) +
theme_bw() +
labs(x="Day of the Month", y="Average Delay in Minutes",title = 'Average Arr/Dep Delay for February 2013') +
theme(axis.ticks = element_blank(),
panel.border = element_rect(color = 'grey10'),
panel.grid.major.y = element_line(color="grey90"),
panel.grid.minor.y = element_line(linetype = 3, color="grey96"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.title = element_text(face='bold'))
query %>% ggplot(aes(x=DayofMonth)) +
geom_line(aes(y=Avg_Dep_Delay,color = 'Departure Delay')) +
geom_line(aes(y=Avg_Arr_Delay,color = 'Arrival Delay')) +
theme_bw() +
labs(x="Day of the Month", y="Average Delay in Minutes",title = 'Average Arr/Dep Delay for February 2013') +
theme(axis.ticks = element_blank(),
panel.grid.major.y = element_line(color="grey90"),
panel.grid.minor.y = element_line(linetype = 3, color="grey96"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.title = element_text(face='bold'))
query %>% ggplot(aes(x=DayofMonth)) +
geom_line(aes(y=Avg_Dep_Delay,color = 'Departure Delay')) +
geom_line(aes(y=Avg_Arr_Delay,color = 'Arrival Delay')) +
theme_bw() +
labs(x="Day of the Month", y="Average Delay in Minutes",title = 'Average Arr/Dep Delay for February 2013') +
theme(axis.ticks = element_blank(),
panel.grid.major.y = element_line(color="grey90"),
panel.grid.minor.y = element_line(linetype = 3, color="grey96"),
panel.grid.major.x = element_line(color="grey93"),
panel.grid.minor.x = element_line(color="grey90"),
axis.title = element_text(face='bold'))
query %>% ggplot(aes(x=DayofMonth)) +
geom_line(aes(y=Avg_Dep_Delay,color = 'Departure Delay')) +
geom_line(aes(y=Avg_Arr_Delay,color = 'Arrival Delay')) +
theme_bw() +
labs(x="Day of the Month", y="Average Delay in Minutes",title = 'Average Arr/Dep Delay for February 2013') +
theme(axis.ticks = element_blank(),
panel.grid.major.y = element_line(color="grey90"),
panel.grid.minor.y = element_line(linetype = 3, color="grey96"),
panel.grid.major.x = element_line(color="grey90"),
panel.grid.minor.x = element_line(color="grey90"),
axis.title = element_text(face='bold'))
query %>% ggplot(aes(x=DayofMonth)) +
geom_line(aes(y=Avg_Dep_Delay,color = 'Departure Delay')) +
geom_line(aes(y=Avg_Arr_Delay,color = 'Arrival Delay')) +
theme_bw() +
labs(x="Day of the Month", y="Average Delay in Minutes",title = 'Average Arr/Dep Delay for February 2013') +
theme(axis.ticks = element_blank(),
panel.grid.major.y = element_line(color="grey90"),
panel.grid.minor.y = element_line(linetype = 3, color="grey96"),
panel.grid.major.x = element_line(color="grey90"),
panel.grid.minor.x = element_blank(),
axis.title = element_text(face='bold'))
query %>% ggplot(aes(x=DayofMonth)) +
geom_line(aes(y=Avg_Dep_Delay,color = 'Departure Delay')) +
geom_line(aes(y=Avg_Arr_Delay,color = 'Arrival Delay')) +
theme_bw() +
labs(x="Day of the Month", y="Average Delay in Minutes",title = 'Average Arr/Dep Delay for February 2013') +
theme(axis.ticks = element_blank(),
panel.grid.major.y = element_line(color="grey90"),
panel.grid.minor.y = element_line(linetype = 3, color="grey96"),
panel.grid.major.x = element_line(color="grey80"),
panel.grid.minor.x = element_blank(),
axis.title = element_text(face='bold'))
query %>% ggplot(aes(x=DayofMonth)) +
geom_line(aes(y=Avg_Dep_Delay,color = 'Departure Delay')) +
geom_line(aes(y=Avg_Arr_Delay,color = 'Arrival Delay')) +
theme_bw() +
labs(x="Day of the Month", y="Average Delay in Minutes",title = 'Average Arr/Dep Delay for February 2013') +
theme(axis.ticks = element_blank(),
panel.grid.major.y = element_line(color="grey90"),
panel.grid.minor.y = element_line(linetype = 3, color="grey96"),
panel.grid.major.x = element_line(color="grey95"),
panel.grid.minor.x = element_blank(),
axis.title = element_text(face='bold'))
query %>% ggplot(aes(x=DayofMonth)) +
geom_line(aes(y=Avg_Dep_Delay,color = 'Departure Delay')) +
geom_line(aes(y=Avg_Arr_Delay,color = 'Arrival Delay')) +
theme_bw() +
labs(x="Day of the Month", y="Average Delay in Minutes",title = 'Average Arr/Dep Delay for February 2013',color = 'test') +
theme(axis.ticks = element_blank(),
panel.grid.major.y = element_line(color="grey90"),
panel.grid.minor.y = element_line(linetype = 3, color="grey96"),
panel.grid.major.x = element_line(color="grey95"),
panel.grid.minor.x = element_blank(),
axis.title = element_text(face='bold'))
query %>% ggplot(aes(x=DayofMonth)) +
geom_line(aes(y=Avg_Dep_Delay,color = 'Departure')) +
geom_line(aes(y=Avg_Arr_Delay,color = 'Arrival')) +
theme_bw() +
labs(x="Day of the Month", y="Average Delay in Minutes",title = 'Average Arr/Dep Delay for February 2013',
color = 'Delay Type') +
theme(axis.ticks = element_blank(),
panel.grid.major.y = element_line(color="grey90"),
panel.grid.minor.y = element_line(linetype = 3, color="grey96"),
panel.grid.major.x = element_line(color="grey95"),
panel.grid.minor.x = element_blank(),
axis.title = element_text(face='bold'))
query %>% ggplot(aes(x=DayofMonth)) +
geom_line(aes(y=Avg_Dep_Delay,color = 'Departure')) +
geom_line(aes(y=Avg_Arr_Delay,color = 'Arrival')) +
theme_bw() +
labs(x="Day of the Month", y="Average Delay in Minutes",title = 'Average Arr/Dep Delay for February 2013',
color = 'Delay Type') +
theme(axis.ticks = element_blank(),
panel.grid.major.y = element_line(color="grey90"),
panel.grid.minor.y = element_line(linetype = 3, color="grey96"),
panel.grid.major.x = element_line(color="grey95"),
panel.grid.minor.x = element_blank(),
axis.title = element_text(face='bold'))
query %>% ggplot(aes(x=DayofMonth)) +
geom_line(aes(y=Avg_Dep_Delay,color = 'Departure')) +
geom_line(aes(y=Avg_Arr_Delay,color = 'Arrival')) +
theme_bw() +
labs(x="Day of the Month", y="Average Delay in Minutes",title = 'Average Arr/Dep Delay for February 2013',
color = 'Delay Type') +
theme(axis.ticks = element_blank(),
panel.grid.major.y = element_line(color="grey90"),
panel.grid.minor.y = element_line(linetype = 3, color="grey96"),
panel.grid.major.x = element_line(color="grey95"),
panel.grid.minor.x = element_blank(),
axis.title = element_text(face='bold'))
query %>% ggplot(aes(x=DayofMonth)) +
geom_line(aes(y=Avg_Dep_Delay,color = 'Departure')) +
geom_line(aes(y=Avg_Arr_Delay,color = 'Arrival')) +
theme_bw() +
labs(x="Day of the Month", y="Average Delay in Minutes",title = 'Average Arr/Dep Delay for February 2013',
color = 'Delay Type') +
theme(axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid.major.y = element_line(color="grey90"),
panel.grid.minor.y = element_line(linetype = 3, color="grey96"),
panel.grid.major.x = element_line(color="grey95"),
panel.grid.minor.x = element_blank(),
axis.title = element_text(face='bold'))
Sys.setenv(SPOTIFY_CLIENT_ID = '6741ffeb822b4b97a00897dbdb0d2811')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '2759887d190b4955a2f849e8c2017522')
access_token <- get_spotify_access_token(client_id = Sys.getenv('SPOTIFY_CLIENT_ID'), client_secret = Sys.getenv('SPOTIFY_CLIENT_SECRET'))
library(spotifyr)
access_token <- get_spotify_access_token(client_id = Sys.getenv('SPOTIFY_CLIENT_ID'), client_secret = Sys.getenv('SPOTIFY_CLIENT_SECRET'))
beatles = get_artist_audio_features('the beatles')
adsf
View(beatles)
get_artists('radiohead')
spotifyr::get_albums('4Z8W4fKeB5YxbusRsdQVPb')
albums_rh = spotifyr::get_albums('4Z8W4fKeB5YxbusRsdQVPb')
radiohead = get_artist_audio_features('radiohead')
View(radiohead)
get_artists('radiohead')
View(albums_rh)
View(radiohead)
?get_track_audio_features
tracks_rh = get_album_tracks(albums_rh)
View(tracks_rh)
spotifyr::get_track_audio_features(tracks_rh)
audio_features_rh = spotifyr::get_track_audio_features(tracks_rh)
View(audio_features_rh)
?get_user_audio_features
spotifyr::get_user_audio_features('livw31')
olivia = spotifyr::get_user_audio_features('livw31')
View(olivia)
get_artists('radiohead')
getwd()
View(radiohead)
get_artists('radiohead')
get_artists('')
albums_rh = get_albums('4Z8W4fKeB5YxbusRsdQVPb')
albums_rh = get_albums('4Z8W4fKeB5YxbusRsdQVPb')
forest = get_user_audio_features('andrb95')
andrew = get_user_audio_features('andrb95')
View(andrew)
library(spotifyr)
Sys.setenv(SPOTIFY_CLIENT_ID = '6741ffeb822b4b97a00897dbdb0d2811')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '2759887d190b4955a2f849e8c2017522')
access_token <- get_spotify_access_token(client_id = Sys.getenv('SPOTIFY_CLIENT_ID'), client_secret = Sys.getenv('SPOTIFY_CLIENT_SECRET'))
radiohead = get_artist_audio_features('radiohead')
get_artists('radiohead')
albums_rh = get_albums('4Z8W4fKeB5YxbusRsdQVPb')
tracks_rh = get_album_tracks(albums_rh)
audio_features_rh = get_track_audio_features(tracks_rh)
olivia = get_user_audio_features('livw31')
andrew = get_user_audio_features('andrb95')
View(audio_features_rh)
View(olivia)
andrew = get_user_audio_features('andrb95')
View(andrew)
View(olivia)
View(audio_features_rh)
get_artists('alabama')
albums_al = get_albums('6rJqqRce0Kvo2dJUXoHleC')
View(albums_al)
tracks_al = get_album_tracks(albums_al)
View(tracks_al)
spotifyr::get_user_playlists('livw31')
liv_playlist = spotifyr::get_user_playlists('livw31')
View(liv_playlist)
View(olivia)
shiny::runApp('SportsAnalytics')
runApp('SportsAnalytics')
runApp('SportsAnalytics')
runApp('SportsAnalytics')
runApp('SportsAnalytics')
runApp('SportsAnalytics')
runApp('SportsAnalytics')
runApp('SportsAnalytics')
shiny::runApp()
setwd("C:/Users/andrb/OneDrive/Documents/SportsAnalytics")
#### IMPORT DATA ####
mastertotal <- read_csv("mastertotal.csv", col_types = cols(X1 = col_skip()))
View(mastertotal)
runApp()
#### SET UP CHOICES ####
off_pos_choices = c(unique(master$PlayerPosition),'Unknown')
mastertotal$WinLoss = rep(NA,nrow(mastertotal))
mastertotal$HomeAway = rep("Home",nrow(mastertotal))
mastertotal = mastertotal[,c(1:7,38,37,8:36)]
#master <- read_csv("Master1Test.csv", col_types = cols(X1 = col_skip()))
master = mastertotal
#All_Results <- read_excel("All-Time FB Results.xlsx", sheet = "All Gms")
#All_Results = All_Results %>% select(Year,`W/L` ,Opponent2,`Opp Conf`,WFU,Opp,Margin)
#colnames(All_Results) = c('calYear',"W/L","Opponent",'OppConf','WFU_Score','OPP_Score','Score_Margin')
def_indiv = read_csv("def_ind_reformatted.csv")[-1]
team = read_csv("Team.csv")[,-1]
master = master %>% full_join(team,by = c('Opponent' = 'Opponent','calYear' = 'Year'))
master = master[,c(1:7,190,182,10:38)]
colnames(master)[8:9] = c('HomeAway','WinLoss')
master$AllPurpYds = rowSums(cbind(master$KOYds,master$PRYds,master$IntYds,
master$RushYds,master$ReceiveYds),na.rm = T)
#### SET UP CHOICES ####
off_pos_choices = c(unique(master$PlayerPosition),'Unknown')
off_pos_choices
#### SET UP CHOICES ####
off_pos_choices = unique(master$PlayerPosition)
#off_pos_choices = sort(off_pos_choices[which(!is.na(off_pos_choices))])
off_pos_choices = c(sort(off_pos_choices),'Unknown')
off_pos_choices
runApp()
off_academic_yr_choices = c(unique(sort(master$PlayerYear)),'Unknown')
runApp()
which(is.na(master$PlayerYear))
runApp()
#### Data Exploration for Wellnecity ####
client1_part1 <- read_csv("C:/Users/andrb/Dropbox/Practicum Project Shared Folder/client1_part1.csv")
client1_part2 <- read_csv("C:/Users/andrb/Dropbox/Practicum Project Shared Folder/client1_part2.csv")
client1_part3 <- read_csv("C:/Users/andrb/Dropbox/Practicum Project Shared Folder/client1_part3.csv")
client1_part4 <- read_csv("C:/Users/andrb/Dropbox/Practicum Project Shared Folder/client1_part4.csv")
client1_part5 <- read_csv("C:/Users/andrb/Dropbox/Practicum Project Shared Folder/client1_part5.csv")
#### Data Re-Config ####
test = rbind(client1_part1,client1_part2)
#### Data Re-Config ####
client1_complete = rbind(client1_part1,client1_part2,client1_part3,client1_part4,client1_part5)
#### Data Import ####
client1_part1 <- read_csv("C:/Users/andrb/Dropbox/Practicum Project Shared Folder/client1_part1.csv")
View(client1_part1)
?runif
runif(3,1,1000)
ceiling(runif(3,1,1000))
client1_part1 <- read_csv("C:/Users/andrb/Dropbox/Practicum Project Shared Folder/client1_part1.csv")
client1_part2 <- read_csv("C:/Users/andrb/Dropbox/Practicum Project Shared Folder/client1_part2.csv")
client1_part3 <- read_csv("C:/Users/andrb/Dropbox/Practicum Project Shared Folder/client1_part3.csv")
client1_part4 <- read_csv("C:/Users/andrb/Dropbox/Practicum Project Shared Folder/client1_part4.csv")
client1_part5 <- read_csv("C:/Users/andrb/Dropbox/Practicum Project Shared Folder/client1_part5.csv")
#### Data Re-Config ####
client1_complete = rbind(client1_part1,client1_part2,client1_part3,client1_part4,client1_part5)
client1_sample = client1_complete[ceiling(runif(1000,1,nrow(client1_complete)))]
client1_sample = client1_complete[ceiling(runif(1000,1,nrow(client1_complete))),]
client1_sample = client1_complete[ceiling(runif(5000,1,nrow(client1_complete))),]
View(client1_sample)
View(client1_sample[1:10,])
library(readxl)
Client_2_Data_Dictionary <- read_excel("C:/Users/andrb/Dropbox/Practicum Project Shared Folder/Client 2 Data Dictionary.xlsx")
View(Client_2_Data_Dictionary)
library(readr)
client2_medical <- read_csv("C:/Users/andrb/Dropbox/Practicum Project Shared Folder/client2_medical.csv")
View(client2_medical)
View(client1_sample)
View(client1_sample)
tracks_al = get_album_tracks(albums_al)
library(spotifyr)
Sys.setenv(SPOTIFY_CLIENT_ID = '6741ffeb822b4b97a00897dbdb0d2811')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '2759887d190b4955a2f849e8c2017522')
access_token <- get_spotify_access_token(client_id = Sys.getenv('SPOTIFY_CLIENT_ID'), client_secret = Sys.getenv('SPOTIFY_CLIENT_SECRET'))
radiohead = get_artist_audio_features('radiohead')
get_artists('alabama')
albums_rh = get_albums('4Z8W4fKeB5YxbusRsdQVPb')
albums_al = get_albums('6rJqqRce0Kvo2dJUXoHleC')
View(albums_al)
tracks_al = get_album_tracks(albums_al)
View(tracks_al)
audio_features_rh = get_track_audio_features(tracks_rh)
tracks_rh = get_album_tracks(albums_rh)
audio_features_rh = get_track_audio_features(tracks_rh)
View(audio_features_rh)
audio_features_rh = get_track_audio_features(tracks_rh)
View(audio_features_rh)
View(audio_features_rh)
andrew = get_user_audio_features('andrb95')
View(andrew)
View(albums_rh)
View(albums_rh)
View(andrew)
get_albums('Vice')
get_artists('Vice')
get_album_tracks('0q4NrXqJnc367PieejuROJ')
get_albums('0q4NrXqJnc367PieejuROJ')
View(andrew)
NA = NA
NA == NA
