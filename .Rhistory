legend('bottomright',legend=c('NN','LM'),pch=18,col=c('red','blue'))
a= -0.5412-0.2356 + 1400*0.000019
a
log(a)
a= -0.5412-0.2356 + 1400*0.000019 + 0.0184(20)
a= -0.5412-0.2356 + 1400*0.000019 + 0.0184*20
a
b = a/(1-a)
b
log(b)
b=a^2
p=1/(1+b)
p
log(p/(1-p))
a
(66+205)/550
rm(list=ls())
library(shiny)
library(readxl)
library(tidyverse)
m1 = read.csv("C:/Users/fiscs14/Desktop/WFU Football/App Build/mastertotalcopy.csv")
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "Y1",
label="Range?",
value = c(1950,2017), min=1950,max=2017),
textInput(inputId = "V1",label="Variable Name",value=""),
selectInput(inputId = "C1",label ="Variable 1",choices = colnames(m1)),
selectInput(inputId = "C2",label="Variable 2", choices = colnames(m1)),
selectInput(inputId = "A1",label = "Math",choices = c("+","-","*","/")),
dataTableOutput("master")
)
server <- function(input, output) {
data2 = reactive(m1 %>% filter(calYear >= input$Y1[1] & calYear<=input$Y1[2]))
output$master = renderDataTable(data2())
}
shinyApp(ui = ui, server = server)
m1 = read.csv("C:/Users/fiscs14/Desktop/WFU Football/App Build/mastertotalcopy.csv")
rawdata = m1%>%filter(Name=="WOLFORD")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput(inputId = "C1",label ="Variable 1",choices = colnames(m1)),
selectInput(inputId = "C2",label="Variable 2", choices = colnames(m1)),
textInput("addVar", "New attribute definition", "curr$df$Value <- ifelse(curr$df$colD == 'Value', 1, 0)"),
actionButton("addButton", strong("Add!")),
width = 3
),
mainPanel(
verticalLayout(
br(),
dataTableOutput("txt")
#Will display histogram of the newly added variables
)
)
)
)
server <- function(input, output, session) {
output$txt <- renderDataTable(curr$df)
curr <- reactiveValues()
curr$df <- rawdata
observeEvent(input$addButton, {
eval(parse(text=input$addVar))
})
}
shinyApp(ui, server)
m1 = read.csv("C:/Users/fiscs14/Desktop/WFU Football/App Build/mastertotalcopy.csv")
rawdata = m1%>%filter(Name=="WOLFORD")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput(inputId = "C1",label ="Variable 1",choices = colnames(m1)),
selectInput(inputId = "C2",label="Variable 2", choices = colnames(m1)),
textInput("addVar", "New attribute definition", paste0("curr$df$Value <- curr$df$",input$C1, "/curr$df$",input$C2)),
actionButton("addButton", strong("Add!")),
width = 3
),
mainPanel(
verticalLayout(
br(),
dataTableOutput("txt")
#Will display histogram of the newly added variables
)
)
)
)
server <- function(input, output, session) {
output$txt <- renderDataTable(curr$df)
curr <- reactiveValues()
curr$df <- rawdata
observeEvent(input$addButton, {
eval(parse(text=input$addVar))
})
}
shinyApp(ui, server)
m1 = read.csv("C:/Users/fiscs14/Desktop/WFU Football/App Build/mastertotalcopy.csv")
rawdata = m1%>%filter(Name=="WOLFORD")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput(inputId = "C1",label ="Variable 1",choices = colnames(m1)),
selectInput(inputId = "C2",label="Variable 2", choices = colnames(m1)),
textInput("addVar", "New attribute definition", "curr$df$Value <- ifelse(curr$df$colD == 'Value', 1, 0)"),
actionButton("addButton", strong("Add!")),
width = 3
),
mainPanel(
verticalLayout(
br(),
dataTableOutput("txt")
#Will display histogram of the newly added variables
)
)
)
)
server <- function(input, output, session) {
output$txt <- renderDataTable(curr$df)
curr <- reactiveValues()
curr$df <- rawdata
observeEvent(input$addButton, {
eval(parse(text=input$C1))
})
}
shinyApp(ui, server)
m1 = read.csv("C:/Users/fiscs14/Desktop/WFU Football/App Build/mastertotalcopy.csv")
rawdata = m1%>%filter(Name=="WOLFORD")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput(inputId = "C1",label ="Variable 1",choices = colnames(m1)),
selectInput(inputId = "C2",label="Variable 2", choices = colnames(m1)),
textInput("addVar", "New attribute definition", "curr$df$Value <- ifelse(curr$df$colD == 'Value', 1, 0)"),
actionButton("addButton", strong("Add!")),
width = 3
),
mainPanel(
verticalLayout(
br(),
dataTableOutput("txt")
#Will display histogram of the newly added variables
)
)
)
)
server <- function(input, output, session) {
output$txt <- renderDataTable(curr$df)
curr <- reactiveValues()
curr$df <- rawdata
observeEvent(input$addButton, {
eval(parse(text=input$C1))
})
}
shinyApp(ui, server)
m1 = read.csv("C:/Users/fiscs14/Desktop/WFU Football/App Build/mastertotalcopy.csv")
rawdata = m1%>%filter(Name=="WOLFORD")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput(inputId = "C1",label ="Variable 1",choices = colnames(m1)),
selectInput(inputId = "C2",label="Variable 2", choices = colnames(m1)),
textInput("addVar", "New attribute definition", "curr$df$Value <- curr$df$RushYds/curr$df$RushTD"),
actionButton("addButton", strong("Add!")),
width = 3
),
mainPanel(
verticalLayout(
br(),
dataTableOutput("txt")
#Will display histogram of the newly added variables
)
)
)
)
server <- function(input, output, session) {
output$txt <- renderDataTable(curr$df)
curr <- reactiveValues()
curr$df <- rawdata
observeEvent(input$addButton, {
eval(parse(text=input$addVar))
})
}
shinyApp(ui, server)
m1 = read.csv("C:/Users/fiscs14/Desktop/WFU Football/App Build/mastertotalcopy.csv")
rawdata = m1%>%filter(Name=="WOLFORD")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput(inputId = "C1",label ="Variable 1",choices = colnames(m1)),
selectInput(inputId = "C2",label="Variable 2", choices = colnames(m1)),
textInput("addVar", "New attribute definition", "curr$df$Value <- curr$df$RushYds/curr$df$RushTD"),
actionButton("addButton", strong("Add!")),
width = 3
),
mainPanel(
verticalLayout(
br(),
dataTableOutput("master")
#Will display histogram of the newly added variables
)
)
)
)
server <- function(input, output, session) {
output$master <- renderDataTable(curr$df)
curr <- reactiveValues()
curr$df <- rawdata
observeEvent(input$addButton, {
eval(parse(text=input$addVar))
})
}
shinyApp(ui, server)
m1 = read.csv("C:/Users/fiscs14/Desktop/WFU Football/App Build/mastertotalcopy.csv")
rawdata = m1%>%filter(Name=="WOLFORD")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput(inputId = "C1",label ="Variable 1",choices = colnames(m1)),
selectInput(inputId = "C2",label="Variable 2", choices = colnames(m1)),
textInput("addVar", "New attribute definition", "curr$df$Value <- curr$df$RushYds/curr$df$RushTD"),
actionButton("addButton", strong("Add!")),
width = 3
),
mainPanel(
verticalLayout(
br(),
dataTableOutput("master")
#Will display histogram of the newly added variables
)
)
)
)
server <- function(input, output, session) {
output$master <- renderDataTable(curr$df)
curr <- reactiveValues()
curr$df <- rawdata
observeEvent(input$addButton, {
eval(parse(text=input$addVar))
})
}
shinyApp(ui, server)
library(tidyverse)
library(shiny)
m1 = read.csv("C:/Users/fiscs14/Desktop/WFU Football/App Build/mastertotalcopy.csv")
rawdata = m1%>%filter(Name=="WOLFORD")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput(inputId = "C1",label ="Variable 1",choices = colnames(m1)),
selectInput(inputId = "C2",label="Variable 2", choices = colnames(m1)),
textInput("addVar", "New attribute definition", "curr$df$Value <- curr$df$RushYds/curr$df$RushTD"),
actionButton("addButton", strong("Add!")),
width = 3
),
mainPanel(
verticalLayout(
br(),
dataTableOutput("master")
#Will display histogram of the newly added variables
)
)
)
)
server <- function(input, output, session) {
output$master <- renderDataTable(curr$df)
curr <- reactiveValues()
curr$df <- rawdata
observeEvent(input$addButton, {
eval(parse(text=input$addVar))
})
}
shinyApp(ui, server)
library(tidyverse)
library(shiny)
m1 = read.csv("C:/Users/fiscs14/Desktop/WFU Football/App Build/mastertotalcopy.csv")
rawdata = m1%>%filter(Name=="WOLFORD")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput(inputId = "C1",label ="Variable 1",choices = colnames(m1)),
selectInput(inputId = "C2",label="Variable 2", choices = colnames(m1)),
textInput("addVar", "New attribute definition", "curr$df$Value <- curr$df$RushYds/curr$df$RushTD"),
actionButton("addButton", strong("Add!")),
width = 3
),
mainPanel(
verticalLayout(
br(),
dataTableOutput("master")
#Will display histogram of the newly added variables
)
)
)
)
server <- function(input, output, session) {
output$master <- renderDataTable(curr$df)
curr <- reactiveValues()
curr$df <- rawdata
observeEvent(input$addButton, {
eval(parse(text=input$addVar))
})
}
shinyApp(ui, server)
library(tidyverse)
library(shiny)
m1 = read.csv("C:/Users/fiscs14/Desktop/WFU Football/App Build/mastertotalcopy.csv")
rawdata = m1%>%filter(Name=="WOLFORD")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput(inputId = "C1",label ="Variable 1",choices = colnames(m1)),
selectInput(inputId = "C2",label="Variable 2", choices = colnames(m1)),
textInput("addVar", "New attribute definition", "curr$df$Value <- curr$df$RushYds/curr$df$RushTD"),
actionButton("addButton", strong("Add!")),
width = 3
),
mainPanel(
verticalLayout(
br(),
dataTableOutput("master")
#Will display histogram of the newly added variables
)
)
)
)
server <- function(input, output, session) {
output$master <- renderDataTable(curr$df)
curr <- reactiveValues()
curr$df <- rawdata
observeEvent(input$addButton, {
eval(parse(text=input$addVar))
})
}
shinyApp(ui, server)
lsplit <- as.data.frame(as.matrix((split(l, cumsum(c(1, diff(l) != 1))))))
l = c(3,4,5,7,9,10,11)
split(l, cumsum(c(1, diff(l) != 1))))))
split(l, cumsum(c(1, diff(l) != 1))
)
lsplit <- as.data.frame(as.matrix((split(l, cumsum(c(1, diff(l) != 1))))))
View(lsplit)
lsplit[[1]]
lsplit <- split(l, cumsum(c(1, diff(l) != 1)))
lsplit[[1]]
length(lsplit)
length(lsplit[[1]])
for (i in 1:length(lsplit)){
if (lsplit[[i]]>1){
print(lsplit[[i]])
}
}
lsplit[[2]]
length(lsplit[[2]])
for (i in 1:length(lsplit)){
if (length(lsplit[[i]])>1){
print(lsplit[[i]])
}
}
which(length(lsplit)>1)
length(lsplit)
install.packages("sqldf")
install.packages("RMySQL")
install.packages("DBI")
library(sqldf)
options(sqldf.driver = "SQLite")
url <- 'http://people.terry.uga.edu/rwatson/data/centralparktemps.txt'
t <- read.table(url, header= T, sep= ',')
trowSQL <- sqldf("select * from t where year = 1999;")
t1 = sqldf("select year,month, and temperature where year >=1990 and year <=1999")
t1 = sqldf("select year,month, and temperature where year >=1990")
t1 = sqldf("select year,month, temperature where year >=1990 and year <=1999")
t1 = sqldf("select Year,Month, Temperature where Year >=1990 and year <=1999")
t1 = sqldf("select Year,Month, Temperature from t where Year >=1990 and year <=1999")
View(t1)
t2 = sqldf("select Year, Month, Temperature from t where Year = 2000 order by desc(Temperature)")
t2 = sqldf("select Year, Month, Temperature from t where Year = 2000 order by Temperature")
View(t2)
t2 = sqldf("select Year, Month, Temperature from t where Year = 2000 order by desc Temperature")
t2 = sqldf("select max(Temperature) from t where Year = 2000")
View(t2)
t2 = sqldf("select Year, Month, max(Temperature) from t where Year = 2000")
View(t2)
t3 = sqldf("select temperature from t where month = 8")
t3 = sqldf("select temperature,year from t where month = 8")
View(t3)
library(ggplot)
library(ggplot2)
ggplot (data = t3, aes(x=year,y=temperature)) +
geom_line()
ggplot (data = t3, aes(x=year,y=temperature)) +
geom_smooth()
ggplot (data = t3, aes(x=year,y=temperature)) +
geom_smooth() + geom_line()
ggplot (data = t3, aes(x=year,y=temperature)) +
geom_smooth() + geom_line(color="red")
library(RMySQL)
library(DBI)
conn <- dbConnect(MySQL(), host= "richardtwatson.com",
dbname= "ClassicModels",
user= "student",
password= "student")
# query database
products <- dbGetQuery(conn, "select * from Products;")
# query database
products <- dbGetQuery(conn, "select * from Products;")
View(products)
orderdetails = dbGetQuery(conn,"select * from orderdetails")
orderdetails = dbGetQuery(conn,"select * from Orderdetails")
orders = dbGetQuery(conn,"select * from orders")
orders = dbGetQuery(conn,"select * from orders;")
orders = dbGetQuery(conn,"select * from Orders;")
View(orders)
orderdetails = dbGetQuery(conn,"select * from Orderdetails;")
orderdetails = dbGetQuery(conn,"select * from orderdetails;")
orderdetails = dbGetQuery(conn,"select * from Orderdetails;")
orderdetails = dbGetQuery(conn,"select * from orderdetails;")
orderdetails = dbGetQuery(conn,"select * from OrderDetails;")
View(orderdetails)
a1 = dbGetQuery(conn, "select priceEach*quantityOrdered as Revenue from OrderDetails")
View(a1)
a1 = dbGetQuery(conn, "select priceEach*quantityOrdered as Revenue,orderDate from OrderDetails,Orders")
View(a1)
a1 = dbGetQuery(conn, "select priceEach*quantityOrdered as Revenue from OrderDetails")
View(a1)
a1 = dbGetQuery(conn, "select priceEach*quantityOrdered as Revenue, month(orderDate) as month from OrderDetails, Orders")
View(a1)
a1 = dbGetQuery(conn, "select sum(priceEach*quantityOrdered) as Revenue,
month(orderDate) as month from OrderDetails, Orders, Products where OrderDetails.productCode = Products.productCode and
OrderDetails.orderNumber = Orders.orderNumber group by Month order by Month")
View(a1)
ggplot (data = a1)+
geom_line(aes(x=Month,y=Revenue))
ggplot (data = a1)+
geom_line(aes(x=month,y=Revenue))
ggplot (data = a1)+
geom_line(aes(x=month,y=Revenue)) +
scale_x_continuous(breaks=c(1:12))
a1 = dbGetQuery(conn, "select sum(priceEach*quantityOrdered) as Revenue,
month(orderDate) as month, year(orderDate) as year from OrderDetails, Orders, Products where OrderDetails.productCode = Products.productCode and
OrderDetails.orderNumber = Orders.orderNumber group by Month order by Month")
a1 = dbGetQuery(conn, "select sum(priceEach*quantityOrdered) as Revenue,
month(orderDate) as month, year(orderDate) as year from OrderDetails, Orders, Products where OrderDetails.productCode = Products.productCode and
OrderDetails.orderNumber = Orders.orderNumber")
a1 = dbGetQuery(conn, "select sum(priceEach*quantityOrdered) as Revenue,
month(orderDate) as month, year(orderDate) as year from OrderDetails, Orders, Products where OrderDetails.productCode = Products.productCode and
OrderDetails.orderNumber = Orders.orderNumber group by Month order by Month")
a1 = dbGetQuery(conn, "select sum(priceEach*quantityOrdered) as Revenue,
month(orderDate) as month from OrderDetails, Orders, Products where OrderDetails.productCode = Products.productCode and
OrderDetails.orderNumber = Orders.orderNumber group by Month order by Month")
a1 = dbGetQuery(conn, "select sum(priceEach*quantityOrdered) as Revenue,
month(orderDate) as month from OrderDetails, Orders, Products where OrderDetails.productCode = Products.productCode and
OrderDetails.orderNumber = Orders.orderNumber group by month order by month")
a1 = dbGetQuery(conn, "select sum(priceEach*quantityOrdered) as Revenue,
month(orderDate) as month, year(orderDate) as year from OrderDetails, Orders, Products where OrderDetails.productCode = Products.productCode and
OrderDetails.orderNumber = Orders.orderNumber group by month,year order by month,year")
View(a1)
ggplot (data = a1)+
geom_line(aes(x=month,y=Revenue),group=year) +
scale_x_continuous(breaks=c(1:12))
ggplot (data = a1)+
geom_line(aes(x=month,y=Revenue,group=year)) +
scale_x_continuous(breaks=c(1:12))
ggplot (data = a1)+
geom_line(aes(x=month,y=Revenue,group=year,color=year)) +
scale_x_continuous(breaks=c(1:12))
ggplot (data = a1)+
geom_line(aes(x=month,y=Revenue,group=year,color=as.factor(year))) +
scale_x_continuous(breaks=c(1:12))
setwd("C:/Users/fiscs14/Desktop/WFU Football")
library(tidyverse)
library(readxl)
setwd("~/GitHub/SportsAnalytics")
team = read.csv("Team.csv")
colnames(team)
team = read.csv("Team.csv") %>%
filter(Day:GameNumber,Wake_Total_Offense,Opp_Total_Offense)
team = read.csv("Team.csv") %>%
select(Day:GameNumber,Wake_Total_Offense,Opp_Total_Offense)
View(team)
team$CombinedOffense = team$Wake_Total_Offense+team$Opp_Total_Offense
View(team)
team = read.csv("Team.csv") %>%
select(Day:GameNumber,Wake_Total_Offense,Opp_Total_Offense,alltime_H.A)
team = read.csv("Team.csv") %>%
select(Day:GameNumber,Wake_Total_Offense,Opp_Total_Offense,alltimefb_H.A)
team = read.csv("Team.csv") %>%
select(Day:GameNumber,alltimefb_H.A,Wake_Total_Offense,Opp_Total_Offense)
h1 = team %>%
filter(alltimefb_H.A=="H")
a1 = team %>%
filter(alltimefb_H.A=="A")
team = read.csv("Team.csv") %>%
select(Day:GameNumber,alltimefb_H.A,Wake_Total_Offense,Opp_Total_Offense)
team$CombinedOffense = team$Wake_Total_Offense+team$Opp_Total_Offense
h1 = team %>%
filter(alltimefb_H.A=="H")
a1 = team %>%
filter(alltimefb_H.A=="A")
View(h1)
View(a1)
colnames(team)
team = read.csv("Team.csv")
colnames(team)
team = read.csv("Team.csv") %>%
select(Day:GameNumber,alltimefb_H.A,Wake_Total_Offense,Opp_Total_Offense,alltimefb_Jersey,alltimefb_Pants,alltimefb_Helmet)
View(team)
library(janitor)
x = colnamaes(team)
x = colnames(team)
str_detect(x,"brk")
team = read.csv("Team.csv") %>%
select(Day:GameNumber,alltimefb_H.A,Wake_Total_Offense,Opp_Total_Offense,Wake_Brk)
View(team)
