# predict sales
spred = BassModel(p,q,M, periods = 17)
spred$Sales
plot(1:17,spred$Sales)
# predict sales
spred = BassModel(p,q,M, periods = 20)
spred$Sales
plot(1:20,spred$Sales)
#### import data ####
speakers <- read_excel("C:/Users/andrb/Documents/Marketing/Assignment3/Fortnite_data.xlsx",sheet = "speakers")
#### visualize data ####
speakers %>%
ggplot(aes(x=time_period,y=n_players)) +
geom_point() +
theme_bw() +
theme(legend.position = "bottom",
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid.minor = element_line(linetype = 3, color="grey96"),
panel.grid.major = element_line(color="grey95"),
axis.title = element_text(face="bold"),
plot.caption = element_text(face="italic")) +
labs(title="Smart Speakers Shipped Globally Between Q1 2017 and Q3 2018",
caption = "Source: Statista",
x="Time Period", y="Number of Users (in Millions)")
#### visualize data ####
speakers %>%
ggplot(aes(x=time_period,y=n_players)) +
geom_point() +
theme_bw() +
theme(legend.position = "bottom",
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid.minor = element_line(linetype = 3, color="grey96"),
panel.grid.major = element_line(color="grey95"),
axis.title = element_text(face="bold"),
plot.caption = element_text(face="italic")) +
labs(title="Smart Speakers Shipped Globally Between Q1 2017 and Q3 2018",
caption = "Source: Statista",
x="Time Period", y="Number of Speakers Shipped (in 10,000s)")
#### import data ####
speakers <- read_excel("C:/Users/andrb/Documents/Marketing/Assignment3/Fortnite_data.xlsx",sheet = "speakers")
#### visualize data ####
speakers %>%
ggplot(aes(x=time_period,y=n_players)) +
geom_point() +
theme_bw() +
theme(legend.position = "bottom",
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid.minor = element_line(linetype = 3, color="grey96"),
panel.grid.major = element_line(color="grey95"),
axis.title = element_text(face="bold"),
plot.caption = element_text(face="italic")) +
labs(title="Smart Speakers Shipped Globally Between Q1 2017 and Q3 2018",
caption = "Source: Statista",
x="Time Period", y="Number of Speakers Shipped (in 10,000s)")
#### Bass model ####
At = cumsum(speakers$n_players)
Atminus1 = c(0,At[-length(At)])
Atminus1SQ = Atminus1^2
out = lm(speakers$n_players ~ Atminus1 + Atminus1SQ )
summary(out)
a = out$coefficients[1]
b = out$coefficients[2]
c = out$coefficients[3]
p = (sqrt(b^2 - 4*a*c)-b)/2
q = (sqrt(b^2 - 4*a*c)+b)/2
M=-q/c
BassModel = function(p,q,M,periods=100){
S = double(periods)
A = double(periods + 1)
A[1] = 0
for (t in 1:periods){
S[t] = p*M + (q-p)*A[t] - (q/M)*A[t]^2
A[t+1] = A[t]+ S[t]
}
return(list(Sales = S,cumSales = cumsum(S)))
}
# predict sales
spred = BassModel(p,q,M, periods = 20)
spred$Sales
plot(1:20,spred$Sales)
## Homework 3 ##
library(readxl)
#### import data ####
speakers <- read_excel("C:/Users/andrb/Documents/Marketing/Assignment3/Fortnite_data.xlsx",sheet = "speakers")
#### visualize data ####
speakers %>%
ggplot(aes(x=time_period,y=n_players)) +
geom_point() +
theme_bw() +
theme(legend.position = "bottom",
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid.minor = element_line(linetype = 3, color="grey96"),
panel.grid.major = element_line(color="grey95"),
axis.title = element_text(face="bold"),
plot.caption = element_text(face="italic")) +
labs(title="Smart Speakers Shipped Globally Between Q1 2017 and Q3 2018",
caption = "Source: Statista",
x="Time Period", y="Number of Speakers Shipped (in 10,000s)")
#### Bass model ####
At = cumsum(speakers$n_players)
Atminus1 = c(0,At[-length(At)])
Atminus1SQ = Atminus1^2
out = lm(speakers$n_players ~ Atminus1 + Atminus1SQ )
summary(out)
a = out$coefficients[1]
b = out$coefficients[2]
c = out$coefficients[3]
p = (sqrt(b^2 - 4*a*c)-b)/2
q = (sqrt(b^2 - 4*a*c)+b)/2
M=-q/c
BassModel = function(p,q,M,periods=100){
S = double(periods)
A = double(periods + 1)
A[1] = 0
for (t in 1:periods){
S[t] = p*M + (q-p)*A[t] - (q/M)*A[t]^2
A[t+1] = A[t]+ S[t]
}
return(list(Sales = S,cumSales = cumsum(S)))
}
# predict sales
spred = BassModel(p,q,M, periods = 20)
spred$Sales
plot(1:20,spred$Sales)
#### visualize data ####
speakers %>%
ggplot(aes(x=time_period,y=n)) +
geom_point() +
theme_bw() +
theme(legend.position = "bottom",
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid.minor = element_line(linetype = 3, color="grey96"),
panel.grid.major = element_line(color="grey95"),
axis.title = element_text(face="bold"),
plot.caption = element_text(face="italic")) +
labs(title="Smart Speakers Shipped Globally Between Q1 2017 and Q3 2018",
caption = "Source: Canalys",
x="Time Period", y="Number of Speakers Shipped (in Millions)")
#### import data ####
speakers <- read_excel("C:/Users/andrb/Documents/Marketing/Assignment3/Fortnite_data.xlsx",sheet = "speakers")
#### visualize data ####
speakers %>%
ggplot(aes(x=time_period,y=n)) +
geom_point() +
theme_bw() +
theme(legend.position = "bottom",
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid.minor = element_line(linetype = 3, color="grey96"),
panel.grid.major = element_line(color="grey95"),
axis.title = element_text(face="bold"),
plot.caption = element_text(face="italic")) +
labs(title="Smart Speakers Shipped Globally Between Q1 2017 and Q3 2018",
caption = "Source: Canalys",
x="Time Period", y="Number of Speakers Shipped (in Millions)")
View(speakers)
#### import data ####
speakers <- read_excel("C:/Users/andrb/Documents/Marketing/Assignment3/Fortnite_data.xlsx",sheet = "speakers")
#### visualize data ####
speakers %>%
ggplot(aes(x=time_period,y=n)) +
geom_point() +
theme_bw() +
theme(legend.position = "bottom",
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid.minor = element_line(linetype = 3, color="grey96"),
panel.grid.major = element_line(color="grey95"),
axis.title = element_text(face="bold"),
plot.caption = element_text(face="italic")) +
labs(title="Smart Speakers Shipped Globally Between Q1 2017 and Q3 2018",
caption = "Source: Canalys",
x="Time Period", y="Number of Speakers Shipped (in Millions)")
summary(out)
At = cumsum(speakers$n)
Atminus1 = c(0,At[-length(At)])
Atminus1SQ = Atminus1^2
out = lm(speakers$n ~ Atminus1 + Atminus1SQ )
summary(out)
a = out$coefficients[1]
b = out$coefficients[2]
c = out$coefficients[3]
p = (sqrt(b^2 - 4*a*c)-b)/2
q = (sqrt(b^2 - 4*a*c)+b)/2
M=-q/c
spred = BassModel(p,q,M, periods = 20)
spred$Sales
plot(1:20,spred$Sales)
# predict sales
spred = BassModel(p,q,M, periods = 20)
View(spred)
spred %>%
mutate(Qnum = 1:20)
spred %>%
ggplot(aes(x=1:20,y=Sales)) +
geom_point() +
theme_bw() +
theme(legend.position = "bottom",
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid.minor = element_line(linetype = 3, color="grey96"),
panel.grid.major = element_line(color="grey95"),
axis.title = element_text(face="bold"),
plot.caption = element_text(face="italic")) +
labs(title="Smart Speakers Shipped Globally Between Q1 2017 and Q3 2018",
caption = "Source: Canalys",
x="Time Period", y="Number of Speakers Shipped (in Millions)")
ggplot(aes(x=1:20,y=spred$Sales)) +
geom_point() +
theme_bw() +
theme(legend.position = "bottom",
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid.minor = element_line(linetype = 3, color="grey96"),
panel.grid.major = element_line(color="grey95"),
axis.title = element_text(face="bold"),
plot.caption = element_text(face="italic")) +
labs(title="Smart Speakers Shipped Globally Between Q1 2017 and Q3 2018",
caption = "Source: Canalys",
x="Time Period", y="Number of Speakers Shipped (in Millions)")
plot_data = as.data.frame(rbind(1:20,spred$Sales))
View(plot_data)
plot_data = as.data.frame(cbind(1:20,spred$Sales))
View(plot_data)
?as.data.frame
plot_data = as.data.frame(cbind(1:20,spred$Sales))
plot_data%>%
ggplot(aes(x=V1,y=V2)) +
geom_point() +
theme_bw() +
theme(legend.position = "bottom",
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid.minor = element_line(linetype = 3, color="grey96"),
panel.grid.major = element_line(color="grey95"),
axis.title = element_text(face="bold"),
plot.caption = element_text(face="italic")) +
labs(title="Smart Speakers Shipped Globally Between Q1 2017 and Q3 2018",
caption = "Source: Canalys",
x="Time Period", y="Number of Speakers Shipped (in Millions)")
plot_data%>%
ggplot(aes(x=V1,y=V2)) +
geom_point() +
theme_bw() +
theme(legend.position = "bottom",
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid.minor = element_line(linetype = 3, color="grey96"),
panel.grid.major = element_line(color="grey95"),
axis.title = element_text(face="bold"),
plot.caption = element_text(face="italic")) +
labs(title="Smart Speakers Global 5 Year projection from 2017-2022",
x="Time Period", y="Number of Speakers Shipped (in Millions)")
library(readr)
austin_bikeshare_stations <- read_csv("C:/Users/andrb/Documents/MGT_5220/Final/austin_bikeshare_stations.csv")
View(austin_bikeshare_stations)
stations <- read_csv("C:/Users/andrb/Documents/MGT_5220/Final/austin_bikeshare_stations.csv")
trips <- read_csv("C:/Users/andrb/Documents/MGT_5220/Final/austin_bikeshare_trips_fin.csv")
library(readr)
stations <- read_csv("C:/Users/andrb/Documents/MGT_5220/Final/austin_bikeshare_stations.csv")
trips <- read_csv("C:/Users/andrb/Documents/MGT_5220/Final/austin_bikeshare_trips_fin.csv")
View(trips)
colnames(trips)[7] = 'station_id'
full = merge(stations,trips, by = 'station_id')
View(full)
library(tidyverse)
full %>%
group_by(station_id) %>%
summarise(total = n())
full %>%
group_by(station_id) %>%
summarise(total = n()) %>%
arrange(desc(total))
order = full %>%
group_by(station_id) %>%
summarise(total = n()) %>%
arrange(desc(total))
View(order)
View(full)
order = full %>%
group_by(station_id, name) %>%
summarise(total = n()) %>%
arrange(desc(total))
library(readr)
model <- read_csv("C:/Users/andrb/Downloads/model.csv")
top_20<-model %>% arrange(desc(`180_amnt`)) %>%
distinct(membno, .keep_all = TRUE)%>%
filter(rank(desc(`180_amnt`))<=20)
id_top20=top_20$membno
##add up cost for each patient in each day
top20_plot<-model%>%
filter(membno %in% id_top20)%>%
group_by(membno,date)%>%
mutate(total_amnt=`Employee Paid Amount`+`Employer Paid Amount`)%>%
summarise(total.sum = sum(total_amnt))
test_top20<-top20_plot
#find the date that has the maximum total amount
library(data.table)
test_top20=as.data.table(test_top20)
test20<-test_top20[,.SD[which.max(total.sum)],by=membno]%>%
select(membno,date)%>%
mutate(date_max=date)%>%
select(-date)
#merge two datasets
top20_final=merge(top20_plot,test20,by.x="membno")
#eliminate observations that are after the max date
top20_tableau=top20_final%>%
filter(date<=date_max)%>%
group_by(membno)%>%
mutate(days_before=as.numeric(date-date_max))%>%
select(days_before,membno,total.sum,date,date_max)
write.csv(top20_tableau,"top20_tableau.csv")
#TOP 50 HCC
#choose the top50 high cost claimnat
top_50<-model %>% arrange(desc(`180_amnt`)) %>%
distinct(membno, .keep_all = TRUE)%>%
filter(rank(desc(`180_amnt`))<=50)
id_top50=top_50$membno
##add up cost for each patient in each day
top50_plot<-model%>%
filter(membno %in% id_top50)%>%
group_by(membno,date)%>%
mutate(total_amnt=`Employee Paid Amount`+`Employer Paid Amount`)%>%
summarise(total.sum = sum(total_amnt))
test_top50<-top50_plot
#find the date that has the maximum total amount
test_top50=as.data.table(test_top50)
test50<-test_top50[,.SD[which.max(total.sum)],by=membno]%>%
select(membno,date)%>%
mutate(date_max=date)%>%
select(-date)
#merge two datasets
top50_final=merge(top50_plot,test50,by.x="membno")
#eliminate observations that are after the max date
top50_tableau=top50_final%>%
filter(date<=date_max)%>%
group_by(membno)%>%
mutate(days_before=as.numeric(date-date_max))%>%
select(days_before,membno,total.sum,date,date_max)
write.csv(top50_tableau,"top50_tableau.csv")
getwd()
top_100<-test_model %>% arrange(desc(`amnt_180`)) %>%
distinct(membno, .keep_all = TRUE)%>%
filter(rank(desc(`amnt_180`))<=100)
id_top100=top_100$membno
##180 amount trajectory
#find the earlist date petient become high cost claimants
top100_early=test_model%>%
filter(membno %in% id_top100)%>%
filter(`amnt_180`>=50000)
top100_early=data.table(top100_early)
top100_early=setDT(top100_early)[order(date), head(.SD, 1L), by = membno]%>%
mutate(earliest_date=date)%>%
select(membno,earliest_date)
#merge two data sets
top100_early_final=merge(test_model,top100_early,by.x="membno")%>%
filter(date<=earliest_date)%>%
select(membno,date,earliest_date,`amnt_180`,diagnosis_code,DIAGNOSIS_CODE_1_DESC,DIAGNOSIS_CODE_2_DESC,`DRG DESC`,
PROCEDURE_1_DESCRIPTION,PROCEDURE_2_DESCRIPTION)
top100_early_final=top100_early_final[!duplicated(top100_early_final),]
top_100_description = top100_early_final %>%
arrange(membno,date) %>%
group_by(membno,date) %>%
mutate(DIAGNOSIS_CODE_1_DESC=replace(DIAGNOSIS_CODE_1_DESC, is.na(DIAGNOSIS_CODE_1_DESC), ''),
DIAGNOSIS_CODE_2_DESC=replace(DIAGNOSIS_CODE_2_DESC, is.na(DIAGNOSIS_CODE_2_DESC), ''),
`DRG DESC`=replace(`DRG DESC`, is.na(`DRG DESC`), ''),
PROCEDURE_1_DESCRIPTION =replace(PROCEDURE_1_DESCRIPTION, is.na(PROCEDURE_1_DESCRIPTION), ''),
PROCEDURE_2_DESCRIPTION =replace(PROCEDURE_2_DESCRIPTION, is.na(PROCEDURE_2_DESCRIPTION), '')) %>%
mutate(all_diagnosis = paste0(diagnosis_code,collapse = ', '),
all_description = paste0(DIAGNOSIS_CODE_1_DESC,DIAGNOSIS_CODE_2_DESC,`DRG DESC`, collapse = ', '),
all_procedure = paste0(PROCEDURE_1_DESCRIPTION,PROCEDURE_2_DESCRIPTION,collapse = ', ')) %>%
select(-DIAGNOSIS_CODE_1_DESC,-DIAGNOSIS_CODE_2_DESC,-diagnosis_code,-`DRG DESC`,-PROCEDURE_1_DESCRIPTION,-PROCEDURE_2_DESCRIPTION)
top_100_description = top_100_description[!duplicated(top_100_description),]
write.csv(top_100_description,"top100_early_new.csv")
test_model <- read_csv("C:/Users/andrb/Documents/Practicum/test_model.csv")
library(dplyr)
library(data.table)
test_model <- read_csv("C:/Users/andrb/Documents/Practicum/test_model.csv")
library(readr)
test_model <- read_csv("C:/Users/andrb/Documents/Practicum/test_model.csv")
top_100<-test_model %>% arrange(desc(`amnt_180`)) %>%
distinct(membno, .keep_all = TRUE)%>%
filter(rank(desc(`amnt_180`))<=100)
id_top100=top_100$membno
##180 amount trajectory
#find the earlist date petient become high cost claimants
top100_early=test_model%>%
filter(membno %in% id_top100)%>%
filter(`amnt_180`>=50000)
top100_early=data.table(top100_early)
top100_early=setDT(top100_early)[order(date), head(.SD, 1L), by = membno]%>%
mutate(earliest_date=date)%>%
select(membno,earliest_date)
#merge two data sets
top100_early_final=merge(test_model,top100_early,by.x="membno")%>%
filter(date<=earliest_date)%>%
select(membno,date,earliest_date,`amnt_180`,diagnosis_code,DIAGNOSIS_CODE_1_DESC,DIAGNOSIS_CODE_2_DESC,`DRG DESC`,
PROCEDURE_1_DESCRIPTION,PROCEDURE_2_DESCRIPTION)
top100_early_final=top100_early_final[!duplicated(top100_early_final),]
top_100_description = top100_early_final %>%
arrange(membno,date) %>%
group_by(membno,date) %>%
mutate(DIAGNOSIS_CODE_1_DESC=replace(DIAGNOSIS_CODE_1_DESC, is.na(DIAGNOSIS_CODE_1_DESC), ''),
DIAGNOSIS_CODE_2_DESC=replace(DIAGNOSIS_CODE_2_DESC, is.na(DIAGNOSIS_CODE_2_DESC), ''),
`DRG DESC`=replace(`DRG DESC`, is.na(`DRG DESC`), ''),
PROCEDURE_1_DESCRIPTION =replace(PROCEDURE_1_DESCRIPTION, is.na(PROCEDURE_1_DESCRIPTION), ''),
PROCEDURE_2_DESCRIPTION =replace(PROCEDURE_2_DESCRIPTION, is.na(PROCEDURE_2_DESCRIPTION), '')) %>%
mutate(all_diagnosis = paste0(diagnosis_code,collapse = ', '),
all_description = paste0(DIAGNOSIS_CODE_1_DESC,DIAGNOSIS_CODE_2_DESC,`DRG DESC`, collapse = ', '),
all_procedure = paste0(PROCEDURE_1_DESCRIPTION,PROCEDURE_2_DESCRIPTION,collapse = ', ')) %>%
select(-DIAGNOSIS_CODE_1_DESC,-DIAGNOSIS_CODE_2_DESC,-diagnosis_code,-`DRG DESC`,-PROCEDURE_1_DESCRIPTION,-PROCEDURE_2_DESCRIPTION)
top_100_description = top_100_description[!duplicated(top_100_description),]
write.csv(top_100_description,"top100_early_new.csv")
getwd()
# initialize stock and call variables to keep track of prices over all iterations
stock_for_graph = as.data.frame(matrix(nrow = 30,ncol = 1000))
stock = rep(0,100000)
call = rep(0,100000)
View(stock_for_graph)
sigma = 0.18
u = 1.009531976
d = 0.990558025
Pu = 0.501669092
Pd = 0.498330908
S0 = 174.79
K = 172.5
rf = 0.0023
# calculate ending stock price and call option value for European option
calc_end_prices = function(){
# create 30 random numbers in {0,1}
sim = rbinom(30,1,Pu)
stock_price = S0
s_prices = rep(NA,30)
for (i in 1:30){
# if random variable is a 1, stock "goes up"; otherwise "goes down"
if(sim[i] == 1){
change = u
} else {
change = d
}
stock_price = stock_price * change # calculate new stock price for period i
s_prices[i] = stock_price
}
call_price = max(stock_price - K,0) # pricing strategy for European option
return(c(s_prices,call_price))
}
# initialize stock and call variables to keep track of prices over all iterations
stock_for_graph = as.data.frame(matrix(nrow = 30,ncol = 1000))
stock = rep(0,100000)
call = rep(0,100000)
calc_end_prices()[1][30]
stock[j] = calc_end_prices()[1]
calc_end_prices()
stock[j] = calc_end_prices()[30]
calc_end_prices()[30]
stock[j] = calc_end_prices()[31]
calc_end_prices()[31]
# initialize stock and call variables to keep track of prices over all iterations
stock_for_graph = as.data.frame(matrix(nrow = 31,ncol = 1000))
stock = rep(0,100000)
call = rep(0,100000)
# run through 100,000 monte carlo simulations
for(j in 1:100000){
stuff = calc_end_prices()
stock[j] = stuff[30]
call[j] = stuff[31]
if(j <= 1000){
stock_for_graph[,j] = c(S0,stuff[-31])
}
}
View(stock_for_graph)
calc_end_prices()
# run through 100,000 monte carlo simulations
for(j in 1:100000){
stuff = calc_end_prices()
stock[j] = stuff[30]
call[j] = stuff[31]
if(j <= 1000){
stock_for_graph[,j] = c(S0,stuff[-31])
call_for_graph[j] = stuff[31]
}
}
call_for_graph = rep(NA,1000)
# run through 100,000 monte carlo simulations
for(j in 1:100000){
stuff = calc_end_prices()
stock[j] = stuff[30]
call[j] = stuff[31]
if(j <= 1000){
stock_for_graph[,j] = c(S0,stuff[-31])
call_for_graph[j] = stuff[31]
}
}
setwd("C:/Users/andrb/OneDrive/Documents/SportsAnalytics")
library(tidyverse)
library(googlesheets)
library(readxl)
library(purrr)
#### Dependencies ####
# uncomment when publishing
#setwd("C:/Users/andrb/OneDrive/Documents/SportsAnalytics")
library(shiny)
#### IMPORT DATA ####
master = gs_read(ss=gs_title('mastertotal'))[,-1] # read the sheet into a data frame (exclude first column of indeces)
?write.csv
write.csv(master,file = 'master_no_NA.csv',na='')
runApp()
