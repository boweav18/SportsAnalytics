}
View(hcc_pv_mat)
View(hcc_t_mat)
for (i in 1:length(day_cols)){
for (j in 1:length(pcts)){
arr = find_hcc_level(pcts[j],full_simple,day_cols[i])
hcc_mat[j,i] = paste('$',format(arr[1],big.mark = ',',scientific = F))
hcc_t_mat[j,i] = arr[4]
hcc_pv_mat[j,i] = arr[5]
}
}
View(hcc_pv_mat)
View(hcc_t_mat)
ls
library(readxl)
library(sqldf)
library(RH2)
### NOTE: For some reason SQLDF didn't like me naming the
###             Transaction entity 'Transaction' so I used the name
###             'Transactio'
###
### NOTE: Had to change date to character and use strftime()
###             instead of YEAR() since YEAR() is not valid in SQLDF
path = "C:/Users/andrb/Downloads/Final Project Data.xlsx"
Ingredient_on_Item <- read_excel(path, sheet = "Ingredient_on_Item")
Ingredient <- read_excel(path, sheet = "Ingredient")
Item <- read_excel(path, sheet = "Item")
Menu <- read_excel(path, sheet = "Menu")
Food <- read_excel(path, sheet = "Food")
Drink <- read_excel(path, sheet = "Drink")
Transactio <- read_excel(path, sheet = "Transaction")
Item_On_Transaction <- read_excel(path, sheet = "Item_On_Transaction")
Customer <- read_excel(path, sheet = "Customer")
Restaurant <- read_excel(path, sheet = "Restaurant")
Restaurant_Has_Employees <- read_excel(path, sheet = "Restaurant_Has_Employees")
Employee <- read_excel(path, sheet = "Employee")
Ingredient_Has_Supplier <- read_excel(path, sheet = "Ingredient_Has_Supplier")
Supplier <- read_excel(path, sheet = "Supplier")
Transactio$Date = as.character(Transactio$Date)
# Question 15
sqldf('select sum(Quantity) as tot_sold ,Item_Name from Item_On_Transaction,Item
where Item_On_Transaction.Item_ID = Item.Item_ID and
Item_Type  in ("Lager", “Ale”, “Pale Ale”, “Stout/Porter”)
group by Item_Name
order by tot_sold DESC
LIMIT 0,3')
View(Item)
# Question 15
sqldf('select sum(Quantity) as tot_sold ,Item_Name from Item_On_Transaction,Item
where Item_On_Transaction.Item_ID = Item.Item_ID and
Item_Type  in ("Lager", “Ale”, “Pale Ale”, “Stout/Porter”)
group by Item_Name
order by tot_sold DESC
LIMIT 0,3')
# Question 15
sqldf('select sum(Quantity) as tot_sold,Item_Name from Item_On_Transaction,Item
where Item_On_Transaction.Item_ID = Item.Item_ID and
Item_Type = in ("Lager", "Ale", "Pale Ale", "Stout/Porter")
group by Item_Name
order by tot_sold DESC
LIMIT 0,3')
# Question 15
sqldf('select sum(Quantity) as tot_sold,Item_Name from Item_On_Transaction,Item
where Item_On_Transaction.Item_ID = Item.Item_ID and
Item_Type in ("Lager", "Ale", "Pale Ale", "Stout/Porter")
group by Item_Name
order by tot_sold DESC
LIMIT 0,3')
# Question 15
sqldf('select sum(Quantity) as tot_sold,Item_Name from Item_On_Transaction,Item
where Item_On_Transaction.Item_ID = Item.Item_ID and
Item_Type in ( "Ale", "Pale Ale", "Stout/Porter")
group by Item_Name
order by tot_sold DESC
LIMIT 0,3')
# Question 15
sqldf('select sum(Quantity) as tot_sold,Item_Name from Item_On_Transaction,Item
where Item_On_Transaction.Item_ID = Item.Item_ID and
Item_Type in ("Lager", "Ale", "Pale Ale", "Stout/Porter")
group by Item_Name
order by tot_sold DESC
LIMIT 0,3')
sqldf('
select SUM(Item.Price * Item_On_Transaction.Quantity) as tot_sale
from Transactio, Item_On_Transaction
')
View(Item)
sqldf('
select SUM(Item.Price * Item_On_Transaction.Quantity) as tot_sale
from Item, Item_On_Transaction
')
sqldf('
select SUM(Item.Price * Item_On_Transaction.Quantity) as tot_sale
from Item, Item_On_Transaction
group by Transaction_ID
')
sqldf('
select Transaction_ID,SUM(Item.Price * Item_On_Transaction.Quantity) as tot_sale
from Item, Item_On_Transaction
group by Transaction_ID
')
sqldf('
select Transaction_ID,SUM(Item.Price * Item_On_Transaction.Quantity) as tot_sale
from Item, Item_On_Transaction
where Item.Item_ID = Item_On_Transaction.Item_ID
group by Transaction_ID
')
sqldf('
select Type,Transaction_ID,SUM(Item.Price * Item_On_Transaction.Quantity) as tot_sale
from Item, Item_On_Transaction,Transaction,Customer
where Item.Item_ID = Item_On_Transaction.Item_ID AND
Item_On_Transaction.Transaction_ID = Transactio.Transaction_ID AND
Transactio.Customer_ID = Customer.Customer_ID
group by Transaction_ID
')
sqldf('
select Type,Transaction_ID,SUM(Item.Price * Item_On_Transaction.Quantity) as tot_sale
from Item, Item_On_Transaction,Transactio,Customer
where Item.Item_ID = Item_On_Transaction.Item_ID AND
Item_On_Transaction.Transaction_ID = Transactio.Transaction_ID AND
Transactio.Customer_ID = Customer.Customer_ID
group by Transaction_ID
')
sqldf('
select Type,Transaction_ID,SUM(Item.Price * Item_On_Transaction.Quantity) as tot_sale
from Item, Item_On_Transaction,Transactio,Customer
where Item.Item_ID = Item_On_Transaction.Item_ID AND
Item_On_Transaction.Transaction_ID = Transactio.Transaction_ID AND
Transactio.Customer_ID = Customer.Customer_ID
group by Transactio.Transaction_ID
')
sqldf('
select Type,Transactio.Transaction_ID,SUM(Item.Price * Item_On_Transaction.Quantity) as tot_sale
from Item, Item_On_Transaction,Transactio,Customer
where Item.Item_ID = Item_On_Transaction.Item_ID AND
Item_On_Transaction.Transaction_ID = Transactio.Transaction_ID AND
Transactio.Customer_ID = Customer.Customer_ID
group by Transactio.Transaction_ID
')
View(Transactio)
sqldf('
select Type,Transactio.Transaction_ID,SUM(Item.Price * Item_On_Transaction.Quantity) as tot_sale
from Item, Item_On_Transaction,Transactio,Customer
where Item.Item_ID = Item_On_Transaction.Item_ID AND
Item_On_Transaction.Transaction_ID = Transactio.Transaction_ID AND
Transactio.`Customer ID`` = Customer.Customer_ID
group by Transactio.Transaction_ID
')
sqldf('
select Type,Transactio.Transaction_ID,SUM(Item.Price * Item_On_Transaction.Quantity) as tot_sale
from Item, Item_On_Transaction,Transactio,Customer
where Item.Item_ID = Item_On_Transaction.Item_ID AND
Item_On_Transaction.Transaction_ID = Transactio.Transaction_ID AND
Transactio.`Customer ID` = Customer.Customer_ID
group by Transactio.Transaction_ID
')
sqldf('
select Item_Name, ABV
from Drink, Item
where Drink.Item_ID = Item.Item_ID
')
sqldf('
select Item_Name, ABV
from Drink, Item
where Drink.Item_ID = Item.Item_ID AND
ABV > (select avg(ABV) from Drink
where Drink.Item_ID = Item.Item_ID)
')
sqldf('select *
from Ingredient, Ingredient_on_Item
where Ingredient.Ingredient_ID = Ingredient_on_Item.Ingredient_ID')
test = sqldf('select *
from Ingredient, Ingredient_on_Item
where Ingredient.Ingredient_ID = Ingredient_on_Item.Ingredient_ID')
View(test)
test = sqldf('select *
from Ingredient, Ingredient_on_Item
where Ingredient.Ingredient_ID = Ingredient_on_Item.Ingredient_ID AND
volume > (select avg(volume) from Ingredient_on_Item
where where Ingredient.Ingredient_ID = Ingredient_on_Item.Ingredient_ID)')
test = sqldf('select *
from Ingredient, Ingredient_on_Item
where Ingredient.Ingredient_ID = Ingredient_on_Item.Ingredient_ID AND
volume > (select avg(volume) from Ingredient_on_Item
where Ingredient.Ingredient_ID = Ingredient_on_Item.Ingredient_ID)')
View(test)
test = sqldf('select Name, Volume
from Ingredient, Ingredient_on_Item
where Ingredient.Ingredient_ID = Ingredient_on_Item.Ingredient_ID AND
volume > (select avg(volume) from Ingredient_on_Item
where Ingredient.Ingredient_ID = Ingredient_on_Item.Ingredient_ID)')
test = sqldf('select Distinct Name, Volume
from Ingredient, Ingredient_on_Item
where Ingredient.Ingredient_ID = Ingredient_on_Item.Ingredient_ID AND
volume > (select avg(volume) from Ingredient_on_Item
where Ingredient.Ingredient_ID = Ingredient_on_Item.Ingredient_ID)')
View(test)
test = sqldf('select Distinct Name
from Ingredient, Ingredient_on_Item
where Ingredient.Ingredient_ID = Ingredient_on_Item.Ingredient_ID AND
volume > (select avg(volume) from Ingredient_on_Item
where Ingredient.Ingredient_ID = Ingredient_on_Item.Ingredient_ID)')
sqldf('
select Type,Transactio.Transaction_ID,SUM(Item.Price * Item_On_Transaction.Quantity) as tot_sale
from Item, Item_On_Transaction,Transactio,Customer
where Item.Item_ID = Item_On_Transaction.Item_ID AND
Item_On_Transaction.Transaction_ID = Transactio.Transaction_ID AND
Transactio.`Customer ID` = Customer.Customer_ID
group by Transactio.Transaction_ID
')
sqldf('
CREATE TABLE test123 as(
select Type,Transactio.Transaction_ID,SUM(Item.Price * Item_On_Transaction.Quantity) as tot_sale
from Item, Item_On_Transaction,Transactio,Customer
where Item.Item_ID = Item_On_Transaction.Item_ID AND
Item_On_Transaction.Transaction_ID = Transactio.Transaction_ID AND
Transactio.`Customer ID` = Customer.Customer_ID
group by Transactio.Transaction_ID
)
')
sqldf('
Create view test123 as
select Type,Transactio.Transaction_ID,SUM(Item.Price * Item_On_Transaction.Quantity) as tot_sale
from Item, Item_On_Transaction,Transactio,Customer
where Item.Item_ID = Item_On_Transaction.Item_ID AND
Item_On_Transaction.Transaction_ID = Transactio.Transaction_ID AND
Transactio.`Customer ID` = Customer.Customer_ID
group by Transactio.Transaction_ID
')
a = sqldf('
Create view test123 as
select Type,Transactio.Transaction_ID,SUM(Item.Price * Item_On_Transaction.Quantity) as tot_sale
from Item, Item_On_Transaction,Transactio,Customer
where Item.Item_ID = Item_On_Transaction.Item_ID AND
Item_On_Transaction.Transaction_ID = Transactio.Transaction_ID AND
Transactio.`Customer ID` = Customer.Customer_ID
group by Transactio.Transaction_ID
')
View(a)
sqldf('
select Type,Transactio.Transaction_ID,SUM(Item.Price * Item_On_Transaction.Quantity) as tot_sale
from Item, Item_On_Transaction,Transactio,Customer
where Item.Item_ID = Item_On_Transaction.Item_ID AND
Item_On_Transaction.Transaction_ID = Transactio.Transaction_ID AND
Transactio.`Customer ID` = Customer.Customer_ID
group by Transactio.Transaction_ID
')
sqldf('
select Type,Restaurant_ID,Transactio.Transaction_ID,SUM(Item.Price * Item_On_Transaction.Quantity) as tot_sale
from Item, Item_On_Transaction,Transactio,Customer
where Item.Item_ID = Item_On_Transaction.Item_ID AND
Item_On_Transaction.Transaction_ID = Transactio.Transaction_ID AND
Transactio.`Customer ID` = Customer.Customer_ID
group by Transactio.Transaction_ID
')
a = sqldf('
select Type,Restaurant_ID,Transactio.Transaction_ID,SUM(Item.Price * Item_On_Transaction.Quantity) as tot_sale
from Item, Item_On_Transaction,Transactio,Customer
where Item.Item_ID = Item_On_Transaction.Item_ID AND
Item_On_Transaction.Transaction_ID = Transactio.Transaction_ID AND
Transactio.`Customer ID` = Customer.Customer_ID
group by Transactio.Transaction_ID
')
View(a)
sqldf('
select Type, Tot_Sale, City
from a,Restaurant
where a.Restaurant_ID = Restaurant.Restaurant_ID
and Tot_Sale > (select AVG(Tot_Sale) from a
where a.Restaurant_ID = Restaurant.Restaurant_ID)
')
## All transactions above the average for each store
sqldf('
select Type,count(*),City
from(
select Type, Tot_Sale, City
from a,Restaurant
where a.Restaurant_ID = Restaurant.Restaurant_ID
and Tot_Sale > (select AVG(Tot_Sale) from a
where a.Restaurant_ID = Restaurant.Restaurant_ID)
)
group by Type,City
')
## All transactions above the average for each store
sqldf('
select Type,count(*)
from(
select Type, Tot_Sale
from a,Restaurant
where a.Restaurant_ID = Restaurant.Restaurant_ID
and Tot_Sale > (select AVG(Tot_Sale) from a
where a.Restaurant_ID = Restaurant.Restaurant_ID)
)
group by Type
')
## All transactions above the average for each store
sqldf('
select Type,count(*) as Num_Trans
from(
select Type, Tot_Sale
from a,Restaurant
where a.Restaurant_ID = Restaurant.Restaurant_ID
and Tot_Sale > (select AVG(Tot_Sale) from a
where a.Restaurant_ID = Restaurant.Restaurant_ID)
)
group by Type
')
## Number of Transactions made spending more than average for that store by customer
sqldf('
select Type,count(*) as Num_Meals
from(
select Type, Tot_Sale
from a,Restaurant
where a.Restaurant_ID = Restaurant.Restaurant_ID
and Tot_Sale > (select AVG(Tot_Sale) from a
where a.Restaurant_ID = Restaurant.Restaurant_ID)
)
group by Type
')
## Number of Meals bought spending more than average for that store by customer type
sqldf('
select City,Type,count(*) as Num_Meals
from(
select Type, Tot_Sale
from a,Restaurant
where a.Restaurant_ID = Restaurant.Restaurant_ID
and Tot_Sale > (select AVG(Tot_Sale) from a
where a.Restaurant_ID = Restaurant.Restaurant_ID)
)
group by City,Type
')
## Number of Meals bought spending more than average for that store by customer type
sqldf('
select City,Type,count(*) as Num_Meals
from(
select Type, Tot_Sale, City
from a,Restaurant
where a.Restaurant_ID = Restaurant.Restaurant_ID
and Tot_Sale > (select AVG(Tot_Sale) from a
where a.Restaurant_ID = Restaurant.Restaurant_ID)
)
group by City,Type
')
library(RMySQL)
library(DBI)
library(tidyverse)
# connect to financial database
conn <- dbConnect(MySQL(), host= "relational.fit.cvut.cz",
dbname= "financial",
user= "guest",
password= "relational")
# query database so that each row is a transaction for a person who has a loan with us
loan_complete <- dbGetQuery(conn, "select *, MONTH(trans.date) as mth_trans, YEAR(trans.date) as yr_trans from account,trans,loan
where account.account_id = trans.account_id and trans.account_id = loan.account_id;")
# make new transaction amount be positive or negative based on withdrawal or credit
loan_complete$new_amount = loan_complete$amount
loan_complete$new_amount[which(loan_complete$type == 'VYDAJ')] =
loan_complete$new_amount[which(loan_complete$type == 'VYDAJ')] * -1
colnames(loan_complete)[18] = "loan.amount"
colnames(loan_complete)[1] = "act.account_id"
colnames(loan_complete)[17] = "loan.date"
colnames(loan_complete)[7] = "act.date"
colnames(loan_complete)[16] = "loan.account_id"
loan_complete %>%
group_by(status,yr_trans,mth_trans) %>%
summarise(avg_balance = mean(balance)) %>%
ggplot(aes(x = as.Date(paste(as.character(mth_trans),
'01',
as.character(yr_trans),
sep = '-'),
"%m-%d-%Y"),
y = avg_balance,color = status)) +
geom_smooth(se = F) +
theme_bw() +
labs(title = "Average Account Balance Over Time") +
ylab("Average Account Balance (in $)") +
xlab('Time')
# query database so that each row is a transaction for a person who has a loan with us
loan_complete <- dbGetQuery(conn, "select *, MONTH(trans.date) as mth_trans, YEAR(trans.date) as yr_trans from trans,loan
where account.account_id = loan.account_id;")
# query database so that each row is a transaction for a person who has a loan with us
loan_complete <- dbGetQuery(conn, "select *, MONTH(trans.date) as mth_trans, YEAR(trans.date) as yr_trans from trans,loan
where trans.account_id = loan.account_id;")
# make new transaction amount be positive or negative based on withdrawal or credit
loan_complete$new_amount = loan_complete$amount
loan_complete$new_amount[which(loan_complete$type == 'VYDAJ')] =
loan_complete$new_amount[which(loan_complete$type == 'VYDAJ')] * -1
colnames(loan_complete)
colnames(loan_complete)[2] = "trans.account_id"
colnames(loan_complete)[3] = "trans.date"
colnames(loan_complete)
colnames(loan_complete)[6] = "trans.amount"
colnames(loan_complete)
loan_complete %>%
group_by(status,yr_trans,mth_trans) %>%
summarise(avg_balance = mean(balance)) %>%
ggplot(aes(x = as.Date(paste(as.character(mth_trans),
'01',
as.character(yr_trans),
sep = '-'),
"%m-%d-%Y"),
y = avg_balance,color = status)) +
geom_smooth(se = F) +
theme_bw() +
labs(title = "Average Account Balance Over Time") +
ylab("Average Account Balance (in $)") +
xlab('Time')
sqldf('Select 2018 -Year(Birth_date) as Age,
CASE
WHEN Age < 30 Then "Youth"
When Age < 50 Then "Middle-Age"
Else "Senior"
End as `Age Group`,
Count(`Gluten Free`) as `Times_eat_gluten_free`, Count(Vegetarian) as `Times_eat_veggies`
from Food, Item, Customer, Transaction
Where Customer.Customer_ID= Transaction.Customer_id and
Transaction.Transaction_id= Item_On_Transaction.Transaction_id and
Item_On_Transaction.Item_ID=item.item_ID and
Item.Item_ID=Food.Item_ID
Group by `Age Group`
')
# Question 15
sqldf('select sum(Quantity) as tot_sold,Item_Name from Item_On_Transaction,Item
where Item_On_Transaction.Item_ID = Item.Item_ID and
Item_Type in ("Lager", "Ale", "Pale Ale", "Stout/Porter")
group by Item_Name
order by tot_sold DESC
LIMIT 0,3')
library(sqldf)
# Question 10
sqldf('select AVG(tot_cal) as avg_tot_cal from (select `Customer ID`,sum(calories) as tot_cal from Transactio,(select Transaction_ID, Ingredient_ID, calories
from Item_On_Transaction ,(select Ingredient.Ingredient_ID,Ingredient_on_Item.Item_ID,calories
from Ingredient, Ingredient_on_Item
where Ingredient.Ingredient_ID = Ingredient_on_Item.Ingredient_ID) as mini1
where Item_On_Transaction.Item_ID = mini1.Item_ID) as mini2
where Transactio.Transaction_ID = mini2.Transaction_ID
group by `Customer ID`)')
setwd("C:/Users/andrb/OneDrive/Documents/SportsAnalytics")
library(shiny)
library(tidyverse)
library(purrr)
library(readxl)
?dataTableOutput
shiny::plotOutput()
shiny::renderPlot()
cars
runApp('app_graph.R')
runApp('app_graph.R')
runApp('app_graph.R')
runApp('app_graph.R')
cal = c(1995,1996,1997,1998,1999)
x = c(1,1,1,1,1,)
x = c(1,1,1,1,1)
rbind(cal,x)
cbind(cal,x)
runApp('app_graph.R')
runApp('app_graph.R')
runApp('app_graph.R')
runApp('app_graph.R')
runApp()
runApp()
runApp()
runApp()
#### IMPORT DATA ####
mastertotal <- read_csv("mastertotal.csv", col_types = cols(X1 = col_skip()))
# add home/away and win/loss
mastertotal$WinLoss = rep(NA,nrow(mastertotal))
mastertotal$HomeAway = rep("Home",nrow(mastertotal))
mastertotal = mastertotal[,c(1:7,38,37,8:36)]
#master <- read_csv("Master1Test.csv", col_types = cols(X1 = col_skip()))
master = mastertotal
master = master %>% full_join(team,by = c('Opponent' = 'Opponent','calYear' = 'Year'))
team = read_csv("Team.csv")[,-1]
master = master %>% full_join(team,by = c('Opponent' = 'Opponent','calYear' = 'Year'))
master = master[,c(1:7,190,182,10:38)]
colnames(master)[8:9] = c('HomeAway','WinLoss')
View(master)
master = master[,-c(10,11)] # remove duplicate homeaway and winloss columns
View(master)
master$AllPurpYds = rowSums(cbind(master$KOYds,master$PRYds,master$IntYds,
master$RushYds,master$ReceiveYds),na.rm = T)
master = master %>% full_join(team,by = c('Opponent' = 'Opponent','calYear' = 'Year'))
View(master)
master = master[,c(1:7,190,182,10:38)]
View(master)
colnames(team)
View(mastertotal)
#### IMPORT DATA ####
mastertotal <- read_csv("mastertotal.csv", col_types = cols(X1 = col_skip()))
# add home/away and win/loss
mastertotal$WinLoss = rep(NA,nrow(mastertotal))
mastertotal$HomeAway = rep("Home",nrow(mastertotal))
mastertotal = mastertotal[,c(1:7,38,37,8:36)]
#master <- read_csv("Master1Test.csv", col_types = cols(X1 = col_skip()))
master = mastertotal
def_indiv = read_csv("def_ind_reformatted.csv")[-1]
team = read_csv("Team.csv")[,-1]
master = master %>% full_join(team,by = c('Opponent' = 'Opponent','calYear' = 'Year'))
master = master[,c(1:7,190,182,10:38)]
colnames(master)[8:9] = c('HomeAway','WinLoss')
master = master[,-c(10,11)] # remove duplicate homeaway and winloss columns
master$AllPurpYds = rowSums(cbind(master$KORYds,master$PRYds,master$IntYds,
master$RushYds,master$ReceiveYds),na.rm = T)
runApp()
runApp()
runApp()
runApp()
library(tidyverse)
library(tidyverse)
library(readr)
final_data <- read_csv("C:/Users/andrb/Downloads/final_data.csv")
View(final_data)
